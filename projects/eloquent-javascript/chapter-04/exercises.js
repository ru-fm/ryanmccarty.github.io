////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step = start < end ? 1 : -1) {
  // if (start < end) {
  //   step = 1;
  // } else {
  //   step = -1;
  // }
  let arr = [];
    
  if (start === end) {
    return arr;
  } else if (step > 0) {
    for (var i = start; i <= end; i += step)
      arr.push(i);
  } else {
    for (var i = start; i >= end; i += step)
      arr.push(i);
  }
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let sum = 0;
  for (let i = 0; i < array.length; i++) {
    sum += array[i];
  }
  return sum;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let reversedArray = [];
  for (let i = 0; i < array.length; i++) {
    reversedArray.unshift(array[i]);
  }
  return reversedArray;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  for (let i = 0; i < Math.floor(array.length / 2); i++) { //the stop condition lets us loop over only half of the array (so we can swap it with the other half)
    let swap = array[i]; //holds first element so we can reassign to the last postion after...
    array[i] = array[array.length - 1 - i]; //...we overwrite the first element with the last element here...
    array[array.length - 1 - i] = swap;//...last position is now the first element which was held in swap.
  }
  console.log(array);
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let list = null;
  for (let i = array.length - 1; i > -1; i--) {
    list = {value: array[i], rest: list};
  }
  return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  let array = [];
  for (let node = list; node; node = node.rest) {
    array.push(node.value);
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
  return {value, rest:list};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
  if (!list) {
    return undefined;
  } else if (n == 0) {
    return list.value;
  } else {
    return nth(list.rest, n - 1);
  }
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
  if (x === y) {
    return true;
  }
  if (typeof x !== 'object' || x === null) {
   return false;
  } 
  if (typeof y !== 'object' || y === null) {
    return false;
  } 
  
  let keysOfX = Object.keys(x);
  let keysOfY = Object.keys(y);
  
  if (keysOfX.length !== keysOfY.length) {
    return false;
  }
  for (let i = 0; i < keysOfX.length; i++) {
    if (!keysOfY.includes(keysOfX[i]) || !deepEqual(x[keysOfX[i]], y[keysOfY[i]])) {
      return false;
    }
  }
  return true;
}
  

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
